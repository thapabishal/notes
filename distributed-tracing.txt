:
┌────────────────┐    ┌────────────────┐    ┌───────────────┐    ┌────────────────┐
│ Microservice 1 ├───>│ Microservice 2 ├──> │ Microservice 3├───>│Microservice X  │
└────────────────┘    └────────────────┘    └───────────────┘    └────────────────┘

• Complex call chain
• How do you debug problems?
• How do you trace requests across microservices?



Distribued Tracing:

┌───────────────┐    ┌──────────────────────────┐   ┌───────────────────────────┐
│   API Gateway │    │  CurrencyExchangeService │   │ CurrencyConversionService │
└───────────────┘    └──────────────────────────┘   └───────────────────────────┘
                \                   |                    /
                 \                  |                   /
                  v                 v                  v
                   ┌─────────────────────────────────────┐
                   │        Distribued Tracing Server    │
                   └─────────────────┬───────────────────┘
                                     │
                                ┌────▼─────┐
                                │ Database │
                                └──────────┘


Distributed tracing, sometimes called distributed request tracing, is a method to monitor applications built on a microservices architecture.
IT and DevOps teams use distributed tracing to follow the course of a request or transaction as it travels through the application that is being monitored. This allows them to pinpoint bottlenecks, bugs, and other issues that impact the application’s performance.

Tracing is a fundamental process in software engineering, used by programmers along with other forms of logging, to gather information about an application’s behavior. But traditional tracing runs into problems when it is used to troubleshoot applications built on a distributed software architecture



Read more:
https://microservices.io/patterns/observability/distributed-tracing.html
